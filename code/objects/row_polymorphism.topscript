#silent true;;
#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.top";;
#require "ppx_jane";;
#silent false;;
open Core_kernel;;
type shape = < area : float > ;;
[%%expect ocaml {|type shape = < area : float >|}];;
type square = < area : float; width : int > ;;
[%%expect ocaml {|type square = < area : float; width : int >|}];;
let square w = object
  method area = Float.of_int (w * w)
  method width = w
end ;;
[%%expect ocaml {|val square : int -> < area : float; width : int > = <fun>|}];;
type circle = < area : float; radius : int > ;;
[%%expect ocaml {|type circle = < area : float; radius : int >|}];;
let circle r = object
  method area = 3.14 *. (Float.of_int r) ** 2.0
  method radius = r
end ;;
[%%expect ocaml {|val circle : int -> < area : float; radius : int > = <fun>|}];;
[@@@part "1"];;
let remove_large l =
  List.filter ~f:(fun s -> s#area <= 100.) l ;;
[%%expect ocaml {|val remove_large : (< area : float; .. > as 'a) list -> 'a list = <fun>|}];;
[@@@part "2"];;
let squares : < area : float; width : int > list = 
  [square 5; square 15; square 10] ;;
[%%expect ocaml {|val squares : < area : float; width : int > list = [<obj>; <obj>; <obj>]|}];;
remove_large squares ;;
[%%expect ocaml {|- : < area : float; width : int > list = [<obj>; <obj>]|}];;
[@@@part "3"];;
let remove_large (l: < area : float > list) = 
  List.filter ~f:(fun s -> s#area <= 100.) l ;;
[%%expect ocaml {|val remove_large : < area : float > list -> < area : float > list = <fun>|}];;
remove_large (squares :> < area : float > list ) ;;
[%%expect ocaml {|- : < area : float > list = [<obj>; <obj>]|}];;
[@@@part "4"];;
let hlist: < area: float; ..> list = [square 10; circle 30] ;;
[%%expect{|
Characters 49-58:
Error: This expression has type < area : float; radius : int >
       but an expression was expected of type < area : float; width : int >
       The second object type has no method radius
|}];;
[@@@part "5"];;
let shape_ref: < area: float; ..> ref = ref (square 40) ;;
[%%expect ocaml {|val shape_ref : < area : float; width : int > ref = {contents = <obj>}|}];;
shape_ref := circle 20 ;;
[%%expect{|
Characters 13-22:
Error: This expression has type < area : float; radius : int >
       but an expression was expected of type < area : float; width : int >
       The second object type has no method radius
|}];;
[@@@part "6"];;
let hlist: shape list = [(square 10 :> shape); (circle 30 :> shape)] ;;
[%%expect ocaml {|val hlist : shape list = [<obj>; <obj>]|}];;
let shape_ref: shape ref = ref (square 40 :> shape) ;;
[%%expect ocaml {|val shape_ref : shape ref = {contents = <obj>}|}];;
shape_ref := (circle 20 :> shape) ;;
[%%expect ocaml {|- : unit = ()|}];;
