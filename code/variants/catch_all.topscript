#silent true;;
#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.top";;
#require "ppx_jane";;
#silent false;;
open Core_kernel;;
type basic_color =
  | Black | Red | Green | Yellow | Blue | Magenta | Cyan | White;;
[%%expect ocaml {|
type basic_color =
    Black
  | Red
  | Green
  | Yellow
  | Blue
  | Magenta
  | Cyan
  | White
|}];;
let basic_color_to_int = function
  | Black -> 0 | Red     -> 1 | Green -> 2 | Yellow -> 3
  | Blue  -> 4 | Magenta -> 5 | Cyan  -> 6 | White  -> 7 ;;
[%%expect ocaml {|val basic_color_to_int : basic_color -> int = <fun>|}];;
[@@@part "1"];;
type color =
  | Basic of basic_color     (* basic colors *)
  | Bold  of basic_color     (* bold basic colors *)
  | RGB   of int * int * int (* 6x6x6 color cube *)
  | Gray  of int             (* 24 grayscale levels *)
;;
[%%expect ocaml {|
type color =
    Basic of basic_color
  | Bold of basic_color
  | RGB of int * int * int
  | Gray of int
|}];;
[@@@part "2"];;
let color_to_int = function
  | Basic (basic_color,weight) ->
    let base = match weight with Bold -> 8 | Regular -> 0 in
    base + basic_color_to_int basic_color
  | RGB (r,g,b) -> 16 + b + g * 6 + r * 36
  | Gray i -> 232 + i ;;
[%%expect{|
Characters 38-58:
Error: This pattern matches values of type 'a * 'b
       but a pattern was expected which matches values of type basic_color
|}];;
[@@@part "3"];;
let color_to_int = function
  | Basic basic_color -> basic_color_to_int basic_color
  | RGB (r,g,b) -> 16 + b + g * 6 + r * 36
  | Gray i -> 232 + i ;;
[%%expect{|
Characters 19-148:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Bold _
|};
ocaml {|val color_to_int : color -> int = <fun>|}];;
[@@@part "4"];;
let color_to_int = function
  | Basic basic_color -> basic_color_to_int basic_color
  | Bold  basic_color -> 8 + basic_color_to_int basic_color
  | RGB (r,g,b) -> 16 + b + g * 6 + r * 36
  | Gray i -> 232 + i ;;
[%%expect ocaml {|val color_to_int : color -> int = <fun>|}];;
[@@@part "5"];;
let oldschool_color_to_int = function
  | Basic (basic_color,weight) ->
    let base = match weight with Bold -> 8 | Regular -> 0 in
    base + basic_color_to_int basic_color
  | _ -> basic_color_to_int White;;
[%%expect{|
Characters 48-68:
Error: This pattern matches values of type 'a * 'b
       but a pattern was expected which matches values of type basic_color
|}];;
[@@@part "6"];;
let oldschool_color_to_int = function
  | Basic basic_color -> basic_color_to_int basic_color
  | _ -> basic_color_to_int White;;
[%%expect ocaml {|val oldschool_color_to_int : color -> int = <fun>|}];;
